[{"/mnt/d/proj/orderbook/src/index.js":"1","/mnt/d/proj/orderbook/src/components/App.js":"2","/mnt/d/proj/orderbook/src/store/interactions.js":"3","/mnt/d/proj/orderbook/src/store/index.js":"4","/mnt/d/proj/orderbook/src/store/slices/web3.js":"5","/mnt/d/proj/orderbook/src/store/slices/account.js":"6","/mnt/d/proj/orderbook/src/store/slices/tokenList.js":"7","/mnt/d/proj/orderbook/src/components/BalanceCard.js":"8","/mnt/d/proj/orderbook/src/components/TradeCard.js":"9","/mnt/d/proj/orderbook/src/store/slices/tradePair.js":"10","/mnt/d/proj/orderbook/src/components/OrderCard.js":"11","/mnt/d/proj/orderbook/src/store/slices/exchange.js":"12","/mnt/d/proj/orderbook/src/components/TransactionsCard.js":"13","/mnt/d/proj/orderbook/src/components/OrderbookCard.js":"14","/mnt/d/proj/orderbook/src/components/ChartCard.js":"15"},{"size":502,"mtime":1607028989526,"results":"16","hashOfConfig":"17"},{"size":3456,"mtime":1607456764091,"results":"18","hashOfConfig":"17"},{"size":6469,"mtime":1607496312932,"results":"19","hashOfConfig":"17"},{"size":551,"mtime":1607463787749,"results":"20","hashOfConfig":"17"},{"size":251,"mtime":1606953953899,"results":"21","hashOfConfig":"17"},{"size":339,"mtime":1607057579171,"results":"22","hashOfConfig":"17"},{"size":285,"mtime":1607040174778,"results":"23","hashOfConfig":"17"},{"size":568,"mtime":1607061540946,"results":"24","hashOfConfig":"17"},{"size":1569,"mtime":1607398636470,"results":"25","hashOfConfig":"17"},{"size":520,"mtime":1607398752481,"results":"26","hashOfConfig":"17"},{"size":1280,"mtime":1607063505168,"results":"27","hashOfConfig":"17"},{"size":1745,"mtime":1607496818892,"results":"28","hashOfConfig":"17"},{"size":4028,"mtime":1607461063663,"results":"29","hashOfConfig":"17"},{"size":2205,"mtime":1607461484699,"results":"30","hashOfConfig":"17"},{"size":2138,"mtime":1607453148104,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"oiwtjj",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"/mnt/d/proj/orderbook/src/index.js",[],["70","71"],"/mnt/d/proj/orderbook/src/components/App.js",["72","73","74"],"import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadWeb3, loadAccount, loadTokensList, loadExchange, loadExchangeData } from '../store/interactions';\nimport { getAccount } from '../store/slices/account';\nimport { getTradePair } from '../store/slices/tradePair';\nimport { Responsive, WidthProvider } from 'react-grid-layout';\nimport TradeCard from './TradeCard';\nimport BalanceCard from './BalanceCard';\nimport TransactionsCard from './TransactionsCard';\nimport OrderbookCard from './OrderbookCard';\nimport { Card } from 'antd-mobile';\nimport OrderCard from './OrderCard';\nimport ChartCard from './ChartCard';\n\nconst layouts = {\n  lg: [\n      {i: 'a', x: 0, y: 0, w: 2, h: 2},\n      {i: 'b', x: 0, y: 2, w: 2, h: 2},\n      {i: 'c', x: 2, y: 0, w: 2, h: 4},\n      {i: 'd', x: 4, y: 0, w: 4, h: 2},\n      {i: 'e', x: 4, y: 2, w: 4, h: 2},\n      {i: 'f', x: 8, y: 0, w: 2, h: 4}\n    ],\n  md: [\n      {i: 'a', x: 0, y: 0, w: 2, h: 15},\n      {i: 'b', x: 0, y: 15, w: 2, h: 15},\n      {i: 'c', x: 2, y: 0, w: 2, h: 30},\n      {i: 'd', x: 4, y: 0, w: 4, h: 15},\n      {i: 'e', x: 4, y: 15, w: 4, h: 15},\n      {i: 'f', x: 8, y: 0, w: 2, h: 15}\n    ],\n  sm: [\n      {i: 'a', x: 0, y: 0, w: 2, h: 15},\n      {i: 'b', x: 0, y: 15, w: 2, h: 15},\n      {i: 'c', x: 2, y: 0, w: 2, h: 30},\n      {i: 'd', x: 4, y: 0, w: 4, h: 15},\n      {i: 'e', x: 4, y: 15, w: 4, h: 15},\n      {i: 'f', x: 8, y: 0, w: 2, h: 15}\n    ]\n}\n\nfunction App() {\n  const dispatch = useDispatch();\n  const account = useSelector(getAccount);\n  const ResponsiveGridLayout = WidthProvider(Responsive);\n  const [loaded, setLoaded] = useState(false);\n\n  const loadBlockchainData = async () => {\n    //Connect to Metamask and Save to redux as logged in\n    const web3 = await loadWeb3(dispatch)\n    //Get eth network\n    await web3.eth.net.getNetworkType()\n    const networkId = await web3.eth.net.getId()\n\n    if (networkId !== \"1\") {\n      alert(\"NOT ON MAINNET\")\n    }\n\n    //Save erc20 token address coingecko list Redux\n    let allTokens = await loadTokensList(web3, dispatch)\n    //Save account address, ether balance, tokens balance to Redux\n    let userAddress = await loadAccount(web3, allTokens, dispatch)\n\n    //load exchange contract\n    const exchange = await loadExchange(web3, networkId)\n    if (!exchange) {\n      window.alert('Exchange smart contract not detected on current network. Please select another network on Metamask.')\n    }\n    //Save exchange balances of user ether and tokens to redux\n    //load from exchange current trade pair orderbook\n    const balances = await loadExchangeData(web3, exchange, userAddress, allTokens, dispatch)\n\n    setLoaded(true)\n  }\n\n  useEffect(() => {\n    loadBlockchainData()\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <button>{account.address ? account.address : 'login to metamask'}</button>\n      {\n        loaded\n        ?\n        <ResponsiveGridLayout  className=\"layouts\" layouts={layouts}\n          breakpoints={{lg: 1200, md: 300, sm: 0}}\n          cols={{lg: 10, md: 6, sm: 2}}>\n          <div key=\"a\"><BalanceCard/></div>\n          <div key=\"b\"><OrderCard/></div>\n          <div key=\"c\"><OrderbookCard/></div>\n          <div key=\"d\"><ChartCard/></div>\n          <div key=\"e\"><Card><TransactionsCard/></Card></div>\n          <div key=\"f\"><TradeCard/></div>\n        </ResponsiveGridLayout >\n        :\n        null\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","/mnt/d/proj/orderbook/src/store/interactions.js",["75","76"],"/mnt/d/proj/orderbook/src/store/index.js",[],"/mnt/d/proj/orderbook/src/store/slices/web3.js",[],"/mnt/d/proj/orderbook/src/store/slices/account.js",[],"/mnt/d/proj/orderbook/src/store/slices/tokenList.js",[],"/mnt/d/proj/orderbook/src/components/BalanceCard.js",["77","78","79"],"import { useEffect } from 'react';\r\nimport { Card } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getAccount } from '../store/slices/account';\r\n\r\nfunction BalanceCard() {\r\n  const account = useSelector(getAccount)\r\n\r\n  useEffect(() => {\r\n    console.log(account)\r\n  }, [])\r\n\r\n  return (\r\n    <Card title=\"Balance\" extra={<a href=\"#\">More</a>} bodyStyle={{maxHeight: 400, overflow: \"auto\"}}>\r\n      <div>ETH: {account.ethBalance / Math.pow(10, 18)}</div>\r\n      <div>TOKENS:</div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default BalanceCard;\r\n","/mnt/d/proj/orderbook/src/components/TradeCard.js",["80","81"],"import { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getTokenList } from '../store/slices/tokenList';\r\nimport { getTradePair } from '../store/slices/tradePair';\r\nimport tradePairSlice from '../store/slices/tradePair';\r\nimport { List, SearchBar } from 'antd-mobile';\r\nimport { Card } from 'antd';\r\n\r\n\r\nconst Item = List.Item;\r\nconst Brief = Item.Brief;\r\n\r\nfunction TradeCard() {\r\n  const dispatch = useDispatch();\r\n  const totalTokenList = useSelector(getTokenList);\r\n  const tradePair = useSelector(getTradePair);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(tradePair)\r\n  }, [tradePair])\r\n\r\n\r\n  return (\r\n    <Card title={`Trade  ETHer/${tradePair.symbol}`} extra={<a href=\"#\">More</a>} bodyStyle={{maxHeight: 800, overflow: \"auto\"}}>\r\n      <SearchBar onChange={(input) => setSearch(input.toUpperCase())} />\r\n      <List className=\"TradeCard\">\r\n        {\r\n          totalTokenList.map(contract => {\r\n            if (contract.name.toUpperCase().includes(search) || contract.symbol.toUpperCase().includes(search) || contract.address.toUpperCase().includes(search)) {\r\n              return (\r\n                <Item onClick={() => dispatch(tradePairSlice.actions.set(contract))} extra=\"10:30\" thumb={contract.logoURI} multipleLine>\r\n                  {contract.symbol} - {contract.name} <Brief>{contract.address}</Brief>\r\n                </Item>\r\n              )\r\n            }\r\n          })\r\n        }\r\n      </List>\r\n    </Card>\r\n\r\n  );\r\n}\r\n\r\nexport default TradeCard;\r\n","/mnt/d/proj/orderbook/src/store/slices/tradePair.js",[],"/mnt/d/proj/orderbook/src/components/OrderCard.js",["82","83","84"],"import { useEffect } from 'react';\r\nimport { Card } from 'antd';\r\nimport ReactTable from 'react-table-v6'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nfunction OrderCard() {\r\n\r\n  useEffect(() => {\r\n  }, [])\r\n\r\n  const data = [{\r\n    name: 'Tanner Linsley',\r\n    age: 26,\r\n    friend: {\r\n      name: 'Jason Maurer',\r\n      age: 23,\r\n    }\r\n  }]\r\n\r\n  const columns = [{\r\n    Header: 'Name',\r\n    accessor: 'name' // String-based value accessors!\r\n  }, {\r\n    Header: 'Age',\r\n    accessor: 'age',\r\n    Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n  }, {\r\n    id: 'friendName', // Required because our accessor is not a string\r\n    Header: 'Friend Name',\r\n    accessor: d => d.friend.name // Custom value accessors!\r\n  }, {\r\n    Header: props => <span>Friend Age</span>, // Custom header components!\r\n    accessor: 'friend.age'\r\n  }]\r\n\r\n\r\n  return (\r\n    <Card title=\"New Order\" extra={<a href=\"#\">More</a>} bodyStyle={{maxHeight: 400, overflow: \"auto\"}}>\r\n      <ReactTable\r\n        data={data}\r\n        columns={columns}\r\n        minRows={0}\r\n  \t\t\tshowPagination={false}\r\n  \t\t\tdefaultPageSize={200}\r\n  \t\t\tresizable={false}\r\n  \t\t\tclassName=\"-striped -highlight\"\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default OrderCard;\r\n","/mnt/d/proj/orderbook/src/store/slices/exchange.js",[],"/mnt/d/proj/orderbook/src/components/TransactionsCard.js",["85","86"],"import { useEffect, useState } from 'react';\r\nimport { Card } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilledOrders, getOpenOrders, getExchangeContract } from '../store/slices/exchange';\r\nimport { getAccount } from '../store/slices/account';\r\nimport { getTradePair } from '../store/slices/tradePair';\r\nimport { cancelOrder } from '../store/interactions';\r\nimport ReactTable from 'react-table-v6';\r\nimport { Button } from 'antd';\r\n\r\n\r\nfunction TransactionsCard() {\r\n  const dispatch = useDispatch();\r\n  const account = useSelector(getAccount)\r\n  const exchangeContract = useSelector(getExchangeContract)\r\n  const filledOrders = useSelector(getFilledOrders)\r\n  const openOrders = useSelector(getOpenOrders)\r\n  const tradePair = useSelector(getTradePair)\r\n  const [selected, setSelected] = useState('open')\r\n\r\n  const historyColumns = [\r\n    {\r\n      id: 'time',\r\n      Header: 'Time',\r\n      accessor: time => time.formattedTimestamp // String-based value accessors!\r\n    },\r\n    {\r\n      id: 'coin',\r\n      Header: `${tradePair.symbol}`,\r\n      accessor: order => {\r\n        // buy eth sell token\r\n        if (order.tokenGet === \"0x0000000000000000000000000000000000000000\") {\r\n          return `-${order.tokenAmount / Math.pow(10, tradePair.decimals)}`\r\n        }\r\n        //sell token buy eth\r\n        return `+${order.tokenAmount / Math.pow(10, tradePair.decimals)}`\r\n      }\r\n    },\r\n    {\r\n      id: 'amount',\r\n      Header: `${tradePair.symbol}/ETH`,\r\n      accessor: order => {\r\n        // buy eth sell token\r\n        if (order.tokenGet === \"0x0000000000000000000000000000000000000000\") {\r\n          return `${order.tokenAmount / order.etherAmount}`\r\n        }\r\n        //sell token buy eth\r\n        return `${order.etherAmount / order.tokenAmount}`\r\n      }\r\n    }\r\n  ]\r\n\r\n  const openColumns = [\r\n    {\r\n      id: 'amount',\r\n      Header: 'Amount',\r\n      accessor: order => {\r\n        // buy eth sell token\r\n        if (order.tokenGet === \"0x0000000000000000000000000000000000000000\") {\r\n          return `-${order.tokenAmount / Math.pow(10, tradePair.decimals)}`\r\n        }\r\n        //sell token buy eth\r\n        return `+${order.tokenAmount / Math.pow(10, tradePair.decimals)}`\r\n      }\r\n    },\r\n    {\r\n      id: 'pair',\r\n      Header: `${tradePair.symbol}/ETH`,\r\n      accessor: order => {\r\n        // buy eth sell token\r\n        if (order.tokenGet === \"0x0000000000000000000000000000000000000000\") {\r\n          return `${Math.round(order.tokenAmount / order.etherAmount * 100000) / 100000}`\r\n        }\r\n        //sell token buy eth\r\n        return `${Math.round(order.etherAmount / order.tokenAmount * 100000) / 100000}`\r\n      }\r\n    },\r\n    {\r\n      id: 'cancel',\r\n      Header: 'Cancel',\r\n      accessor: order => {\r\n        return (<Button onClick={() => cancelOrder(exchangeContract, order.id, account.address, dispatch)}>Cancel</Button>)\r\n      }\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    console.log(filledOrders)\r\n  }, [])\r\n\r\n  return (\r\n    <Card title=\"Transactions\" extra={<a href=\"#\">More</a>} bodyStyle={{maxHeight: 400, overflow: \"auto\"}}>\r\n      <Button onClick={() => setSelected('open')}>OPEN ORDERS</Button><Button onClick={() => setSelected('history')}>HISTORY</Button>\r\n\r\n      {\r\n        selected === 'open'\r\n        ?\r\n        <ReactTable\r\n          data={openOrders.filter(order => order.user === account.address).sort((a,b) => b.timestamp - a.timestamp)}\r\n          columns={openColumns}\r\n          minRows={0}\r\n          showPagination={false}\r\n          defaultPageSize={200}\r\n          resizable={false}\r\n          className=\"-striped -highlight\"\r\n        />\r\n        :\r\n        <ReactTable\r\n          data={filledOrders.filter(order => order.user === account.address)}\r\n          columns={historyColumns}\r\n          minRows={0}\r\n          showPagination={false}\r\n          defaultPageSize={200}\r\n          resizable={false}\r\n          className=\"-striped -highlight\"\r\n        />\r\n      }\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default TransactionsCard;\r\n","/mnt/d/proj/orderbook/src/components/OrderbookCard.js",["87","88","89"],"import { useEffect } from 'react';\r\nimport { Card } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getOpenOrders } from '../store/slices/exchange';\r\nimport { getTradePair } from '../store/slices/tradePair';\r\nimport ReactTable from 'react-table-v6'\r\n\r\n\r\nfunction OrderbookCard() {\r\n  const openOrders = useSelector(getOpenOrders)\r\n  const tradePair = useSelector(getTradePair)\r\n\r\n  const sellColumns = [\r\n    {\r\n      id: 'coin',\r\n      accessor: order => {\r\n        return order.tokenAmount / Math.pow(10, tradePair.decimals)\r\n      }\r\n    },\r\n    {\r\n      id: 'amount',\r\n      accessor: order => order.tokenPrice\r\n    },\r\n    {\r\n      id: 'eth',\r\n      accessor: order => {\r\n        return order.etherAmount / Math.pow(10, 18)\r\n      }\r\n    }\r\n  ]\r\n\r\n  const buyColumns = [\r\n    {\r\n      id: 'coin',\r\n      Header: `${tradePair.symbol}`,\r\n      accessor: order => {\r\n        return order.tokenAmount / Math.pow(10, tradePair.decimals)\r\n      }\r\n    },\r\n    {\r\n      id: 'amount',\r\n      Header: `${tradePair.symbol}/ETH`,\r\n      accessor: order => order.tokenPrice\r\n    },\r\n    {\r\n      id: 'eth',\r\n      Header: `ETH`,\r\n      accessor: order => {\r\n        return order.etherAmount / Math.pow(10, 18)\r\n      }\r\n    }\r\n  ]\r\n\r\n  const middle = [{\r\n    Header: `${tradePair.symbol}`,\r\n  }]\r\n\r\n  useEffect(() => {\r\n  }, [])\r\n\r\n  return (\r\n    <Card title=\"Orderbook\" extra={<a href=\"#\">More</a>} bodyStyle={{maxHeight: 800, overflow: \"auto\"}}>\r\n      <ReactTable\r\n        data={openOrders.filter(order => order.tokenGet === \"0x0000000000000000000000000000000000000000\")}\r\n        columns={sellColumns}\r\n        minRows={0}\r\n        showPagination={false}\r\n        defaultPageSize={200}\r\n        resizable={false}\r\n        TheadComponent={_ => null}\r\n        className=\"-striped -highlight\"\r\n      />\r\n      <ReactTable\r\n        data={openOrders.filter(order => order.tokenGet !== \"0x0000000000000000000000000000000000000000\")}\r\n        columns={buyColumns}\r\n        minRows={0}\r\n        showPagination={false}\r\n        defaultPageSize={200}\r\n        resizable={false}\r\n        className=\"-striped -highlight\"\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default OrderbookCard;\r\n","/mnt/d/proj/orderbook/src/components/ChartCard.js",["90","91","92","93","94"],"import { useEffect } from 'react';\r\nimport { Card } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilledOrders, getChartData } from '../store/slices/exchange';\r\nimport ApexCharts from 'apexcharts';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport moment from 'moment';\r\n\r\nfunction ChartCard() {\r\n  const filledOrders = useSelector(getFilledOrders)\r\n  const chartData = useSelector(getChartData)\r\n\r\n  const options = {\r\n              chart: {\r\n                height: 350,\r\n                type: 'candlestick',\r\n              },\r\n              title: {\r\n                text: 'CandleStick Chart - Category X-axis',\r\n                align: 'left'\r\n              },\r\n              annotations: {\r\n                xaxis: [\r\n                  {\r\n                    x: 'Oct 06 14:00',\r\n                    borderColor: '#00E396',\r\n                    label: {\r\n                      borderColor: '#00E396',\r\n                      style: {\r\n                        fontSize: '12px',\r\n                        color: '#fff',\r\n                        background: '#00E396'\r\n                      },\r\n                      orientation: 'horizontal',\r\n                      offsetY: 7,\r\n                      text: 'Annotation Test'\r\n                    }\r\n                  }\r\n                ]\r\n              },\r\n              tooltip: {\r\n                enabled: true,\r\n              },\r\n              xaxis: {\r\n                type: 'category',\r\n                labels: {\r\n                  formatter: function(val) {\r\n                    return moment(val).format('MMM DD HH:mm')\r\n                  }\r\n                }\r\n              },\r\n              yaxis: {\r\n                tooltip: {\r\n                  enabled: true\r\n                }\r\n              }\r\n            }\r\n\r\n  useEffect(() => {\r\n    console.log(chartData)\r\n  }, [])\r\n\r\n  return (\r\n    <Card title=\"Balance\" extra={<a href=\"#\">More</a>} bodyStyle={{maxHeight: 400, overflow: \"auto\"}}>\r\n      <ReactApexChart options={options} series={chartData} type=\"candlestick\" height={350} />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ChartCard;\r\n",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":5,"column":10,"nodeType":"101","messageId":"102","endLine":5,"endColumn":22},{"ruleId":"99","severity":1,"message":"103","line":71,"column":11,"nodeType":"101","messageId":"102","endLine":71,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":78,"column":6,"nodeType":"106","endLine":78,"endColumn":8,"suggestions":"107"},{"ruleId":"99","severity":1,"message":"108","line":5,"column":8,"nodeType":"101","messageId":"102","endLine":5,"endColumn":22},{"ruleId":"99","severity":1,"message":"109","line":7,"column":8,"nodeType":"101","messageId":"102","endLine":7,"endColumn":13},{"ruleId":"99","severity":1,"message":"110","line":3,"column":23,"nodeType":"101","messageId":"102","endLine":3,"endColumn":34},{"ruleId":"104","severity":1,"message":"111","line":11,"column":6,"nodeType":"106","endLine":11,"endColumn":8,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":14,"column":34,"nodeType":"115","endLine":14,"endColumn":46},{"ruleId":"113","severity":1,"message":"114","line":25,"column":61,"nodeType":"115","endLine":25,"endColumn":73},{"ruleId":"116","severity":1,"message":"117","line":29,"column":39,"nodeType":"118","messageId":"119","endLine":29,"endColumn":41},{"ruleId":"99","severity":1,"message":"120","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":21},{"ruleId":"99","severity":1,"message":"110","line":4,"column":23,"nodeType":"101","messageId":"102","endLine":4,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":38,"column":36,"nodeType":"115","endLine":38,"endColumn":48},{"ruleId":"104","severity":1,"message":"121","line":89,"column":6,"nodeType":"106","endLine":89,"endColumn":8,"suggestions":"122"},{"ruleId":"113","severity":1,"message":"114","line":92,"column":39,"nodeType":"115","endLine":92,"endColumn":51},{"ruleId":"99","severity":1,"message":"110","line":3,"column":23,"nodeType":"101","messageId":"102","endLine":3,"endColumn":34},{"ruleId":"99","severity":1,"message":"123","line":54,"column":9,"nodeType":"101","messageId":"102","endLine":54,"endColumn":15},{"ruleId":"113","severity":1,"message":"114","line":62,"column":36,"nodeType":"115","endLine":62,"endColumn":48},{"ruleId":"99","severity":1,"message":"110","line":3,"column":23,"nodeType":"101","messageId":"102","endLine":3,"endColumn":34},{"ruleId":"99","severity":1,"message":"124","line":5,"column":8,"nodeType":"101","messageId":"102","endLine":5,"endColumn":18},{"ruleId":"99","severity":1,"message":"125","line":10,"column":9,"nodeType":"101","messageId":"102","endLine":10,"endColumn":21},{"ruleId":"104","severity":1,"message":"126","line":61,"column":6,"nodeType":"106","endLine":61,"endColumn":8,"suggestions":"127"},{"ruleId":"113","severity":1,"message":"114","line":64,"column":34,"nodeType":"115","endLine":64,"endColumn":46},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'getTradePair' is defined but never used.","Identifier","unusedVar","'balances' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadBlockchainData'. Either include it or remove the dependency array.","ArrayExpression",["130"],"'tradePairSlice' is defined but never used.","'axios' is defined but never used.","'useDispatch' is defined but never used.","React Hook useEffect has a missing dependency: 'account'. Either include it or remove the dependency array.",["131"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'filledOrders'. Either include it or remove the dependency array.",["132"],"'middle' is assigned a value but never used.","'ApexCharts' is defined but never used.","'filledOrders' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chartData'. Either include it or remove the dependency array.",["133"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [loadBlockchainData]",{"range":"142","text":"143"},"Update the dependencies array to be: [account]",{"range":"144","text":"145"},"Update the dependencies array to be: [filledOrders]",{"range":"146","text":"147"},"Update the dependencies array to be: [chartData]",{"range":"148","text":"149"},[2756,2758],"[loadBlockchainData]",[303,305],"[account]",[2980,2982],"[filledOrders]",[1869,1871],"[chartData]"]